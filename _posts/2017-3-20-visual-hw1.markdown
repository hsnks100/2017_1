---
layout: post
tags: 
title2: 시각개론 문자 세그먼테이션 HW1
comments: true
---

# 문자 세그먼테이션

![](../images/visual/lotto.jpg)

이번 과제는 위와 같은 삐뚤어진 글자를 영역을 구하고 해당하는 글자를 구하는 과제다.

# TOOL

![](../images/visual/logo.png)

유명한 Computer Vision 툴인 OpenCV 를 이용하여 과제를 했다.

[http://opencv.org](http://opencv.org/) 에서 관련 정보를 모두 얻을 수 있다.

나는 OpenCV 는 C/C++ 를 포함하여 파이썬까지 다양한 언어를 지원하고 있어서 그 중에 파이썬을 이용하여 과제를 했다.

# 그레이 스케일 및 변환


``` python
imgfile = 'lotto.jpg'
img = cv2.imread(imgfile, cv2.IMREAD_GRAYSCALE)  

M = cv2.getRotationMatrix2D((cols/2,rows/2),-19,1) # rotate
img = cv2.warpAffine(img,M,(cols,rows))  
img2 = img[500:700, 140:720] # cut
rows, cols = img2.shape
ret, croppedImage = cv2.threshold(img2, 200, 255, cv2.THRESH_BINARY_INV) 
```

일단 이미지를 원하는 형태로 주무르기 위해서 변환이 필요하다. 일단 기울어져있고, 불필요한 영역들이 많고, 색상값이 필요가 없다.

이를 위해서 위의 코드를 이용하여 회전, 자르기, 스레숄딩을 가한다.  

# 프로젝션 

``` python

def getProjection(img):
    size = img.shape
    verticalM = np.zeros(size, dtype=np.uint8) # ?
    verticalM = cv2.cvtColor(verticalM, cv2.COLOR_GRAY2BGR)

    horizonalM = np.zeros(size, dtype=np.uint8) # ?
    horizonalM = cv2.cvtColor(horizonalM, cv2.COLOR_GRAY2BGR)

    vertList = []
    horizList = []
    for y in range(0, rows):
        data = img[y, 0:cols]
        nonzeros =  np.count_nonzero(data)
        cv2.line(verticalM, (0, y), (nonzeros, y), (0, 0, 255), 1)
        vertList.append(nonzeros)
    for x in range(0, cols):
        data = img[0:rows, x]
        nonzeros =  np.count_nonzero(data)
        cv2.line(horizonalM, (x, 0), (x, nonzeros), (0, 0, 255), 1)
        horizList.append(nonzeros)

    yList = []
    xList = []

    for idx, y in enumerate(vertList):
        if vertList[idx] > 0 and (vertList[idx-1] == 0 or vertList[idx+1] == 0):
            # print idx
            yList.append(idx)
            cv2.line(img, (0, idx), (cols, idx), (255, 255, 255), 1)

    for idx, x in enumerate(horizList):
        if idx - 1 >= 0 and idx + 1 < len(horizList):
            if horizList[idx] > 10 and (horizList[idx-1] <= 10 or horizList[idx+1] <= 10):
                cv2.line(img, (idx, 0), (idx, rows), (255, 255, 255), 1)
                xList.append(idx) 

    for i in range(0, len(yList) - 1):
        for j in range(0, len(xList) - 1):
            # print xList[j], yList[i]
            # print xList[j+1], yList[i+1]
            getProjectionArr(croppedImage, (xList[j], yList[i]),
                    (xList[j+1], yList[i+1])) 
    
    return horizonalM, verticalM, img
```

위의 코드는 영역 분할을 위해 프로젝션을 하고 영역 분할을 시각적으로 보여주는 코드다.

다소 길지만 핵심 코드만 보자면, 

``` python
    for y in range(0, rows):
        data = img[y, 0:cols]
        nonzeros =  np.count_nonzero(data)
        cv2.line(verticalM, (0, y), (nonzeros, y), (0, 0, 255), 1)
        vertList.append(nonzeros)
    for x in range(0, cols):
        data = img[0:rows, x]
        nonzeros =  np.count_nonzero(data)
        cv2.line(horizonalM, (x, 0), (x, nonzeros), (0, 0, 255), 1)
        horizList.append(nonzeros) 
```

스레숄딩 이후 zero 가 아닌 부분의 개수를 가로로 세고 세로로 세고 하는 부분이다. 이 부분을 거치고 빈 canvas 에 line 을 그리는 것으로 마무리 한다. 


![](../images/visual/hw1.png)

수행된 모습은 위와 같다.

# 문자 인식 


``` python

def classificationprojection(horiz, vert):
    curnum = 0
    mindiff = 99999
    for i in range(0, 9): 
        diff = 0 
        # avg = sum(basenum[i][0]) / float(len(basenum[i][0]))
        diff += abs(dev(basenum[i][0]) - dev(horiz))
        diff += abs(dev(basenum[i][1]) - dev(vert))
        

        # for j in range(0, min(len(horiz), len(basenum[i][0]))):
            # diff += abs(horiz[j] - basenum[i][0][j])

        # for j in range(0, min(len(vert), len(basenum[i][1]))):
            # diff += abs(vert[j] - basenum[i][1][j])

        if mindiff > diff:
            mindiff = diff
            curnum = i

    
    print horiz, vert
    print curnum
    return curnum

if(sum(horizProj) > 20 and sum(vertProj) > 20 and 
        len(horizProj) > 10 and len(vertProj) > 10): 
    classificationProjection(horizProj, vertProj)

```

문자인식은 프로젝션 배열의 분산과 각 요소들이 차로 구하게 된다.


15 18 20 26 37 44  
01 07 08 16 23 28  
04 05 14 20 26 44  
01 02 12 15 28 36  
02 11 20 21 31 38  

위의 실제 숫자들에 대응하는 프로젝션 배열은 아래와 같다.


```
[0, 0, 7, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 0, 0] [0, 0, 0, 0, 3, 3, 3, 19, 21, 21, 21, 20, 0, 0, 0, 0, 0, 0, 0, 0]  
1  
[0, 0, 18, 18, 13, 4, 4, 4, 4, 5, 16, 17, 19, 7, 5, 5, 5, 5, 5, 7, 19, 17, 16, 0, 0] [14, 14, 14, 14, 10, 9, 8, 9, 9, 8, 9, 9, 11, 11, 16, 15, 13, 11, 9, 0]  
5  
[0, 1, 7, 9, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 0] [0, 0, 0, 1, 3, 3, 3, 20, 21, 21, 22, 19, 0, 0, 0, 0, 0, 0, 0]  
1  
[0, 4, 14, 16, 10, 9, 9, 9, 9, 11, 18, 16, 18, 11, 9, 9, 9, 9, 9, 12, 19, 17, 14, 0, 0] [16, 19, 21, 21, 12, 9, 9, 9, 9, 8, 8, 9, 8, 12, 21, 21, 19, 17, 13]  
8  
[0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 0, 0, 0] [13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]  
7  
[0, 8, 15, 17, 11, 9, 9, 5, 5, 6, 7, 8, 8, 8, 7, 6, 6, 6, 5, 7, 19, 19, 18, 0, 0] [8, 11, 13, 14, 15, 12, 11, 10, 9, 10, 9, 10, 9, 10, 12, 13, 13, 11, 9, 0]  
2  
[0, 8, 15, 17, 9, 9, 10, 10, 9, 10, 10, 9, 9, 10, 9, 9, 10, 9, 9, 12, 18, 15, 6, 0, 0] [6, 18, 18, 20, 20, 6, 7, 6, 6, 4, 6, 5, 6, 7, 5, 20, 20, 20, 18, 14, 0]  
0  
[0, 12, 15, 18, 10, 9, 8, 5, 6, 6, 8, 8, 8, 8, 7, 6, 7, 6, 5, 19, 19, 19, 13, 0, 0] [9, 11, 13, 14, 15, 12, 12, 11, 11, 11, 11, 10, 11, 12, 12, 14, 13, 11, 9, 0]  
3  
[0, 7, 9, 10, 7, 5, 4, 5, 5, 17, 19, 19, 11, 10, 10, 10, 9, 10, 12, 19, 18, 16, 1, 0, 0] [11, 17, 19, 19, 21, 12, 10, 10, 9, 9, 9, 9, 8, 6, 8, 13, 13, 12, 11, 7]  
8  
[2, 19, 19, 10, 6, 7, 7, 8, 8, 7, 10, 11, 8, 5, 5, 4, 4, 8, 10, 19, 18, 16, 0, 0, 0] [5, 6, 7, 7, 7, 5, 8, 10, 10, 10, 13, 14, 13, 14, 16, 19, 18, 16, 13, 0]  
3  
[12, 18, 18, 6, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 4, 0, 0, 0] [3, 2, 2, 3, 3, 2, 9, 12, 12, 15, 16, 12, 11, 12, 11, 9, 8, 5, 0]  
6  
[4, 7, 8, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 11, 19, 19, 19, 5, 5, 5, 3, 0, 0, 0] [4, 5, 7, 8, 10, 11, 10, 9, 10, 9, 8, 8, 7, 21, 22, 22, 22, 20, 3, 0]  
4
[6, 7, 8, 10, 10, 9, 9, 8, 9, 9, 9, 9, 9, 9, 11, 18, 18, 18, 4, 4, 4, 4, 0, 0, 0] [5, 6, 8, 9, 10, 10, 10, 10, 9, 8, 8, 8, 9, 22, 22, 22, 22, 4, 0]
4


[0, 8, 13, 16, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 17, 15, 10, 0, 0] [16, 18, 19, 21, 6, 8, 6, 6, 6, 6, 6, 6, 7, 7, 20, 20, 19, 17, 15, 0]
0
[0, 3, 8, 8, 7, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 3, 0, 0] [0, 0, 0, 0, 2, 3, 3, 3, 21, 22, 22, 21, 3, 0, 0, 0, 0, 0, 0, 0]
7
[0, 8, 14, 17, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 17, 16, 5, 0, 0] [16, 19, 20, 20, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 20, 20, 19, 18, 14]
0
[0, 18, 19, 19, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0] [3, 3, 3, 3, 3, 3, 3, 10, 12, 15, 16, 12, 12, 12, 11, 10, 8, 7, 4]
6
[0, 9, 15, 18, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 9, 9, 10, 9, 15, 17, 15, 5, 0, 0] [10, 17, 18, 20, 20, 6, 6, 7, 7, 5, 7, 6, 5, 7, 7, 20, 20, 20, 18, 14]
0
[0, 10, 16, 18, 11, 9, 9, 9, 10, 14, 18, 18, 19, 11, 10, 9, 9, 9, 10, 17, 19, 17, 10, 0, 0] [0, 18, 20, 20, 21, 16, 11, 11, 10, 8, 8, 10, 9, 11, 13, 21, 21, 20, 19, 15, 0]
8
[0, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 0, 0] [0, 0, 0, 0, 0, 3, 3, 3, 20, 22, 22, 22, 21, 0, 0, 0, 0, 0, 0, 0]
7
[0, 7, 9, 9, 7, 5, 5, 4, 4, 16, 18, 19, 10, 9, 9, 9, 9, 9, 10, 19, 18, 16, 3, 0, 0] [0, 17, 18, 19, 20, 14, 11, 10, 9, 9, 9, 9, 8, 6, 6, 14, 13, 12, 11, 9]
8
[6, 14, 16, 11, 10, 9, 7, 5, 6, 7, 8, 9, 7, 7, 7, 7, 5, 6, 6, 19, 19, 18, 0, 0, 0] [6, 11, 13, 14, 14, 12, 10, 10, 10, 10, 10, 10, 10, 10, 12, 14, 13, 11, 9, 0]
3
[15, 19, 19, 6, 6, 7, 7, 8, 8, 8, 10, 10, 9, 6, 5, 5, 7, 9, 11, 19, 18, 15, 0, 0, 0] [6, 8, 9, 7, 7, 9, 8, 11, 11, 12, 13, 14, 15, 16, 20, 18, 17, 15, 11]
3
[8, 15, 16, 10, 9, 8, 5, 5, 6, 7, 8, 8, 7, 8, 5, 6, 6, 5, 6, 19, 18, 18, 0, 0, 0] [5, 10, 13, 14, 14, 12, 10, 10, 9, 10, 10, 10, 9, 10, 11, 13, 13, 11, 9, 0]
3
[8, 14, 17, 9, 9, 9, 9, 9, 12, 18, 18, 18, 11, 9, 9, 9, 9, 9, 12, 19, 18, 14, 0, 0, 0] [18, 19, 21, 21, 12, 11, 9, 9, 9, 9, 9, 9, 10, 11, 21, 21, 19, 19, 12]
8


[0, 9, 15, 17, 10, 9, 8, 8, 8, 8, 9, 8, 9, 9, 8, 8, 9, 9, 10, 16, 17, 14, 1, 0] [16, 18, 19, 20, 12, 6, 7, 5, 5, 6, 6, 5, 6, 6, 8, 20, 20, 18, 16, 0]
0
[0, 5, 7, 9, 10, 11, 10, 10, 9, 11, 9, 9, 9, 9, 9, 18, 19, 19, 18, 5, 4, 4, 2, 0] [3, 5, 7, 8, 10, 11, 11, 11, 11, 10, 9, 9, 9, 13, 21, 22, 22, 20, 4, 0]
4
[0, 11, 16, 18, 10, 9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 8, 8, 10, 10, 18, 17, 15, 0, 0] [17, 19, 20, 20, 9, 6, 6, 6, 6, 5, 6, 6, 6, 6, 17, 20, 20, 18, 16]
0
[0, 19, 19, 17, 5, 5, 5, 5, 5, 16, 17, 18, 7, 5, 4, 4, 4, 4, 6, 16, 19, 15, 0, 0] [11, 14, 14, 14, 14, 8, 8, 9, 9, 9, 9, 9, 10, 11, 12, 16, 13, 13, 12]
5
[0, 8, 8, 7, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0] [0, 0, 0, 0, 0, 2, 3, 3, 4, 21, 21, 21, 21, 0, 0, 0, 0, 0, 0, 0]
7
[1, 7, 8, 9, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 11, 19, 19, 19, 8, 5, 5, 4, 1, 0] [0, 4, 5, 7, 9, 10, 11, 10, 10, 9, 8, 8, 8, 9, 20, 22, 22, 21, 21, 3, 0]
4
[3, 14, 16, 17, 9, 9, 7, 6, 6, 7, 8, 8, 9, 8, 6, 6, 6, 5, 5, 19, 19, 18, 0, 0] [0, 9, 12, 14, 14, 13, 11, 10, 10, 10, 11, 9, 11, 10, 11, 14, 13, 12, 10, 7]
3
[6, 14, 17, 15, 10, 9, 8, 8, 9, 8, 8, 9, 9, 8, 8, 9, 8, 10, 10, 17, 16, 12, 0, 0] [0, 16, 18, 20, 21, 11, 6, 7, 5, 6, 7, 6, 6, 7, 6, 11, 21, 19, 19, 16]
0
[8, 14, 17, 10, 9, 9, 7, 5, 6, 7, 8, 9, 8, 8, 6, 7, 6, 5, 5, 18, 19, 18, 0, 0] [0, 10, 12, 15, 14, 13, 11, 11, 10, 9, 10, 9, 10, 10, 10, 14, 13, 12, 11, 5]
3
[5, 7, 9, 7, 6, 5, 5, 5, 9, 18, 19, 18, 10, 10, 9, 9, 9, 10, 12, 19, 17, 15, 0, 0] [16, 18, 19, 20, 19, 11, 9, 11, 10, 8, 9, 10, 6, 7, 12, 13, 13, 12, 10]
8
[6, 7, 9, 10, 10, 9, 9, 8, 9, 9, 9, 9, 9, 10, 13, 19, 19, 18, 4, 4, 4, 3, 0, 0] [0, 5, 6, 8, 9, 10, 11, 11, 10, 10, 8, 8, 8, 9, 21, 22, 22, 22, 5, 2]
4
[6, 7, 9, 10, 11, 10, 9, 10, 10, 10, 10, 10, 10, 11, 14, 19, 19, 16, 5, 5, 5, 2, 0, 0] [4, 6, 7, 9, 10, 12, 9, 11, 10, 9, 8, 8, 9, 21, 21, 22, 22, 18, 2]
4


[0, 10, 16, 18, 10, 9, 9, 9, 9, 9, 9, 10, 9, 9, 10, 9, 9, 10, 10, 10, 17, 16, 10, 0, 0] [15, 17, 20, 20, 20, 7, 6, 6, 6, 6, 6, 6, 6, 6, 8, 20, 20, 20, 18, 4]
0
[0, 5, 8, 8, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0] [0, 0, 0, 0, 0, 2, 2, 2, 5, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0]
7
[0, 12, 16, 17, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 11, 17, 16, 8, 0, 0] [15, 18, 20, 20, 21, 6, 6, 6, 6, 6, 4, 6, 6, 7, 8, 22, 20, 20, 17]
0
[0, 12, 16, 17, 10, 8, 8, 4, 5, 7, 8, 8, 9, 8, 7, 6, 6, 5, 5, 6, 18, 18, 15, 0, 0] [1, 10, 13, 14, 16, 13, 12, 10, 9, 10, 10, 10, 10, 10, 12, 14, 12, 11, 9]
2
[1, 7, 8, 7, 4, 4, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 0, 0] [0, 0, 0, 0, 0, 1, 3, 3, 3, 21, 23, 22, 22, 15, 0, 0, 0, 0, 0, 0]
7
[4, 14, 16, 13, 10, 9, 7, 5, 6, 7, 8, 8, 8, 8, 6, 6, 6, 5, 5, 12, 18, 18, 15, 0, 0] [0, 4, 11, 13, 15, 15, 12, 13, 12, 9, 7, 9, 9, 11, 12, 12, 15, 14, 12, 9, 0]
2
[3, 8, 8, 7, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 5, 4, 5, 4, 3, 0, 0] [0, 0, 0, 0, 0, 2, 3, 3, 3, 22, 23, 23, 22, 5, 0, 0, 0, 0, 0, 0]
7
[18, 19, 19, 5, 5, 5, 5, 5, 6, 16, 18, 18, 6, 4, 4, 4, 4, 4, 6, 18, 19, 16, 4, 0, 0] [0, 11, 15, 15, 15, 16, 10, 9, 9, 9, 9, 10, 9, 10, 12, 11, 16, 15, 14, 13]
3
[8, 15, 17, 11, 9, 9, 6, 5, 7, 7, 8, 8, 8, 8, 7, 6, 6, 5, 5, 19, 19, 19, 2, 0, 0] [0, 9, 13, 14, 15, 12, 11, 10, 10, 10, 10, 10, 10, 11, 10, 13, 13, 13, 11, 9]
3
[8, 15, 17, 11, 9, 9, 9, 9, 13, 18, 17, 19, 13, 10, 9, 9, 9, 9, 11, 19, 18, 16, 1, 0, 0] [15, 19, 21, 21, 22, 12, 11, 9, 9, 9, 9, 9, 9, 11, 13, 21, 21, 20, 17]
8
[18, 19, 19, 6, 6, 8, 7, 8, 8, 8, 10, 10, 8, 5, 5, 5, 7, 9, 11, 19, 18, 15, 0, 0, 0] [0, 6, 8, 9, 8, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 20, 19, 17, 16, 12]
3
[5, 7, 10, 7, 6, 5, 5, 5, 12, 18, 19, 13, 10, 9, 9, 9, 9, 9, 11, 19, 18, 15, 0, 0, 0] [16, 18, 20, 20, 20, 11, 10, 10, 9, 9, 9, 8, 6, 7, 8, 13, 13, 12, 11]
8


[0, 8, 13, 16, 12, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 18, 17, 15, 2, 0] [11, 17, 19, 20, 21, 7, 7, 6, 6, 7, 6, 6, 7, 7, 6, 21, 21, 20, 18, 15]
0
[0, 7, 14, 17, 14, 10, 9, 7, 5, 6, 7, 8, 8, 8, 8, 6, 6, 6, 5, 5, 18, 19, 19, 8, 0] [0, 9, 12, 15, 15, 14, 12, 11, 10, 9, 12, 11, 11, 11, 10, 14, 13, 12, 11, 8]
2
[0, 3, 8, 8, 6, 5, 5, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 0, 0] [0, 0, 0, 0, 0, 2, 2, 3, 9, 22, 22, 22, 21, 0, 0, 0, 0, 0, 0]
7
[0, 4, 8, 8, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 0] [0, 0, 0, 0, 0, 2, 2, 2, 3, 22, 22, 23, 22, 0, 0, 0, 0, 0, 0]
7
[0, 9, 14, 18, 11, 9, 8, 4, 5, 6, 7, 8, 8, 9, 8, 7, 7, 6, 5, 5, 18, 18, 18, 0, 0] [0, 2, 11, 12, 14, 15, 14, 11, 11, 10, 10, 10, 10, 10, 10, 11, 13, 13, 11, 10]
2
[0, 10, 16, 18, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 17, 17, 13, 0, 0] [0, 0, 17, 20, 20, 21, 8, 6, 6, 6, 6, 6, 6, 6, 6, 8, 21, 21, 20, 19, 16]
0
[0, 11, 16, 18, 10, 9, 7, 5, 5, 6, 7, 8, 9, 9, 7, 7, 6, 6, 6, 6, 19, 19, 18, 0, 0] [0, 7, 11, 13, 14, 15, 13, 11, 10, 10, 10, 9, 10, 10, 10, 13, 13, 13, 12, 10]
2
[0, 5, 8, 8, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0] [0, 0, 0, 0, 0, 0, 2, 2, 2, 5, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0]
7
[0, 19, 19, 18, 6, 7, 7, 8, 9, 7, 9, 11, 10, 6, 4, 4, 4, 7, 9, 12, 19, 18, 14, 0, 0] [0, 5, 8, 8, 9, 8, 7, 10, 10, 11, 12, 13, 13, 14, 16, 16, 19, 18, 15, 15]
3
[0, 8, 9, 8, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0] [0, 0, 0, 0, 1, 3, 3, 3, 11, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0]
7
[2, 19, 19, 15, 6, 7, 7, 8, 8, 7, 9, 10, 9, 6, 5, 4, 4, 7, 9, 14, 18, 17, 14, 0, 0] [0, 4, 7, 8, 9, 7, 7, 10, 9, 11, 12, 13, 14, 15, 16, 16, 20, 18, 15, 13]
3
[1, 13, 16, 14, 8, 9, 9, 9, 11, 14, 16, 18, 19, 10, 9, 9, 8, 8, 9, 13, 18, 17, 13, 0, 0] [9, 17, 20, 22, 22, 12, 11, 10, 8, 10, 8, 7, 10, 11, 13, 22, 21, 20, 18]
8
```

여기서 인식된 숫자를 뽑아보면 다음과 같다.

``` 
15 18 20 26 37 44
01 07 08 16 23 28
04 05 14 20 26 44
01 02 12 15 28 36
02 11 20 21 31 38
```

```
15 18 20 [38] 3[6] 44 
0[7] 0[6] 08 [78] [3]3 [3]8
04 05 [7]4 [30] [38] 44
0[7] 02 [7]2 [73] 3[8] 38
02 [77] 20 2[7] 3[7] 38
```

하지만 원하는 값과는 몇가지 숫자가 차이가 있어 보인다.

차이가 있는 숫자는 대괄호안에 표현하였다. 기대했던값과 상이한 이유는 공교롭게 숫자의 분산이나 차의 합들이 비슷해서 그런것 같다. 

전체 코드는 아래에 남긴다.  


# 코드

``` python

import cv2
import numpy as np

from matplotlib import pyplot as plt

# 15 18 20 26 37 44
# 01 07 08 16 23 28
# 04 05 14 20 26 44
# 01 02 12 15 28 36
# 02 11 20 21 31 38
# 0 : [0, 8, 15, 17, 9, 9, 10, 10, 9, 10, 10, 9, 9, 10, 9, 9, 10, 9, 9, 12, 18, 15, 6, 0, 0] [6, 18, 18, 20, 20, 6, 7, 6, 6, 4, 6, 5, 6, 7, 5, 20, 20, 20, 18, 14, 0]
# 1 : [0, 0, 7, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 0, 0] [0, 0, 0, 0, 3, 3, 3, 19, 21, 21, 21, 20, 0, 0, 0, 0, 0, 0, 0, 0]
# 2 : [0, 8, 15, 17, 11, 9, 9, 5, 5, 6, 7, 8, 8, 8, 7, 6, 6, 6, 5, 7, 19, 19, 18, 0, 0] [8, 11, 13, 14, 15, 12, 11, 10, 9, 10, 9, 10, 9, 10, 12, 13, 13, 11, 9, 0]
# 3 : [0, 12, 15, 18, 10, 9, 8, 5, 6, 6, 8, 8, 8, 8, 7, 6, 7, 6, 5, 19, 19, 19, 13, 0, 0] [9, 11, 13, 14, 15, 12, 12, 11, 11, 11, 11, 10, 11, 12, 12, 14, 13, 11, 9, 0]
# 4 : [0, 5, 7, 9, 10, 11, 10, 10, 9, 11, 9, 9, 9, 9, 9, 18, 19, 19, 18, 5, 4, 4, 2, 0] [3, 5, 7, 8, 10, 11, 11, 11, 11, 10, 9, 9, 9, 13, 21, 22, 22, 20, 4, 0]
# 5 : [0, 0, 18, 18, 13, 4, 4, 4, 4, 5, 16, 17, 19, 7, 5, 5, 5, 5, 5, 7, 19, 17, 16, 0, 0] [14, 14, 14, 14, 10, 9, 8, 9, 9, 8, 9, 9, 11, 11, 16, 15, 13, 11, 9, 0]
# 6 : [0, 18, 19, 19, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0] [3, 3, 3, 3, 3, 3, 3, 10, 12, 15, 16, 12, 12, 12, 11, 10, 8, 7, 4]
# 7 : [0, 3, 8, 8, 7, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 3, 0, 0] [0, 0, 0, 0, 2, 3, 3, 3, 21, 22, 22, 21, 3, 0, 0, 0, 0, 0, 0, 0]
# 8 : [0, 4, 14, 16, 10, 9, 9, 9, 9, 11, 18, 16, 18, 11, 9, 9, 9, 9, 9, 12, 19, 17, 14, 0, 0] [16, 19, 21, 21, 12, 9, 9, 9, 9, 8, 8, 9, 8, 12, 21, 21, 19, 17, 13]
baseNum = [ 
        ([0, 8, 15, 17, 9, 9, 10, 10, 9, 10, 10, 9, 9, 10, 9, 9, 10, 9, 9, 12, 18, 15, 6, 0, 0], [6, 18, 18, 20, 20, 6, 7, 6, 6, 4, 6, 5, 6, 7, 5, 20, 20, 20, 18, 14, 0]),
([0, 0, 7, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 0, 0], [0, 0, 0, 0, 3, 3, 3, 19, 21, 21, 21, 20, 0, 0, 0, 0, 0, 0, 0, 0]),
([0, 8, 15, 17, 11, 9, 9, 5, 5, 6, 7, 8, 8, 8, 7, 6, 6, 6, 5, 7, 19, 19, 18, 0, 0], [8, 11, 13, 14, 15, 12, 11, 10, 9, 10, 9, 10, 9, 10, 12, 13, 13, 11, 9, 0]),
([0, 12, 15, 18, 10, 9, 8, 5, 6, 6, 8, 8, 8, 8, 7, 6, 7, 6, 5, 19, 19, 19, 13, 0, 0], [9, 11, 13, 14, 15, 12, 12, 11, 11, 11, 11, 10, 11, 12, 12, 14, 13, 11, 9, 0]),
([0, 5, 7, 9, 10, 11, 10, 10, 9, 11, 9, 9, 9, 9, 9, 18, 19, 19, 18, 5, 4, 4, 2, 0], [3, 5, 7, 8, 10, 11, 11, 11, 11, 10, 9, 9, 9, 13, 21, 22, 22, 20, 4, 0]),
([0, 0, 18, 18, 13, 4, 4, 4, 4, 5, 16, 17, 19, 7, 5, 5, 5, 5, 5, 7, 19, 17, 16, 0, 0], [14, 14, 14, 14, 10, 9, 8, 9, 9, 8, 9, 9, 11, 11, 16, 15, 13, 11, 9, 0]),
([0, 18, 19, 19, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 0, 0], [3, 3, 3, 3, 3, 3, 3, 10, 12, 15, 16, 12, 12, 12, 11, 10, 8, 7, 4]),
([0, 3, 8, 8, 7, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 3, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 21, 22, 22, 21, 3, 0, 0, 0, 0, 0, 0, 0]),
([0, 4, 14, 16, 10, 9, 9, 9, 9, 11, 18, 16, 18, 11, 9, 9, 9, 9, 9, 12, 19, 17, 14, 0, 0], [16, 19, 21, 21, 12, 9, 9, 9, 9, 8, 8, 9, 8, 12, 21, 21, 19, 17, 13])
]


def average(l):
    return sum(l) / float(len(l))

def dev(l):
    avg = sum(l) / float(len(l))
    sume = 0
    for x in l:
        sume += (x - avg)*(x - avg)

    return sume / len(l)

def classificationProjection(horiz, vert):
    curNum = 0
    minDiff = 99999
    for i in range(0, 9):

        diff = 0

        # avg = sum(baseNum[i][0]) / float(len(baseNum[i][0]))
        diff += abs(dev(baseNum[i][0]) - dev(horiz))
        diff += abs(dev(baseNum[i][1]) - dev(vert))
        

        # for j in range(0, min(len(horiz), len(baseNum[i][0]))):
            # diff += abs(horiz[j] - baseNum[i][0][j])

        # for j in range(0, min(len(vert), len(baseNum[i][1]))):
            # diff += abs(vert[j] - baseNum[i][1][j])

        if minDiff > diff:
            minDiff = diff
            curNum = i

    
    print horiz, vert
    print curNum
    # if minDiff < 50:

        # print ""
    # print curNum, minDiff
    return curNum
croppedImage = 0


# def classificationProjection(horiz, vert):
    # pass


def getProjectionArr(img, lefttop, rightbottom):
    minX = lefttop[0]
    minY = lefttop[1]
    maxX = rightbottom[0]
    maxY = rightbottom[1]

    # print minX, maxX
    # print minY, maxY

    vertProj = []
    horizProj = []
    for y in range(minY, maxY + 1):

        nonzeros = np.count_nonzero(img[y, minX:maxX + 1])
        horizProj.append(nonzeros)

    for x in range(minX, maxX + 1):
        nonzeros = np.count_nonzero(img[minY:maxY + 1, x])
        vertProj.append(nonzeros)


    if(sum(horizProj) > 20 and sum(vertProj) > 20 and 
            len(horizProj) > 10 and len(vertProj) > 10): 
        classificationProjection(horizProj, vertProj)

    # print horizProj, ",", vertProj

    return horizProj, vertProj


def getProjection(img):
    size = img.shape
    verticalM = np.zeros(size, dtype=np.uint8) # ?
    verticalM = cv2.cvtColor(verticalM, cv2.COLOR_GRAY2BGR)

    horizonalM = np.zeros(size, dtype=np.uint8) # ?
    horizonalM = cv2.cvtColor(horizonalM, cv2.COLOR_GRAY2BGR)

    vertList = []
    horizList = []
    for y in range(0, rows):
        data = img[y, 0:cols]
        # print data
        nonzeros =  np.count_nonzero(data)
        cv2.line(verticalM, (0, y), (nonzeros, y), (0, 0, 255), 1)
        vertList.append(nonzeros)
    for x in range(0, cols):
        data = img[0:rows, x]
        # print data
        nonzeros =  np.count_nonzero(data)
        cv2.line(horizonalM, (x, 0), (x, nonzeros), (0, 0, 255), 1)
        horizList.append(nonzeros)
        # cv2.line(

    yList = []
    xList = []

    for idx, y in enumerate(vertList):
        if vertList[idx] > 0 and (vertList[idx-1] == 0 or vertList[idx+1] == 0):
            # print idx
            yList.append(idx)
            cv2.line(img, (0, idx), (cols, idx), (255, 255, 255), 1)

    for idx, x in enumerate(horizList):
        if idx - 1 >= 0 and idx + 1 < len(horizList):
            if horizList[idx] > 10 and (horizList[idx-1] <= 10 or horizList[idx+1] <= 10):
                cv2.line(img, (idx, 0), (idx, rows), (255, 255, 255), 1)
                xList.append(idx)


    print "--------"
    for i in range(0, len(yList) - 1):
        for j in range(0, len(xList) - 1):
            # print xList[j], yList[i]
            # print xList[j+1], yList[i+1]
            getProjectionArr(croppedImage, (xList[j], yList[i]),
                    (xList[j+1], yList[i+1])) 
        print ""
    
    return horizonalM, verticalM, img








imgfile = 'lotto.jpg'
img = cv2.imread(imgfile, cv2.IMREAD_GRAYSCALE) 
rows,cols = img.shape

M = cv2.getRotationMatrix2D((cols/2,rows/2),-19,1)
img = cv2.warpAffine(img,M,(cols,rows))
# img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)


img2 = img[500:700, 140:720]
rows, cols = img2.shape
ret, croppedImage = cv2.threshold(img2, 200, 255, cv2.THRESH_BINARY_INV) 





cv2.imshow('main', croppedImage)
cv2.moveWindow('main', 300, 300)

horizM, vertM, segmentImg = getProjection(croppedImage.copy())
# plt.imshow(segmentImg, interpolation='bicubic')
# plt.xticks([]), plt.yticks([])
# plt.show()

cv2.imshow('new', segmentImg)
cv2.moveWindow('new', 100, 100)
cv2.imshow('b', horizM)
cv2.moveWindow('b', 100 + 0, 100 + rows)
cv2.imshow('c', vertM)
cv2.moveWindow('c', 100 + cols, 100 + 0)

while(cv2.waitKey(0) != 25):
    continue



# cv2.waitKey(0)
# plt.imshow(img, cmap='gray', interpolation='bicubic')
# plt.xticks([]), plt.yticks([])
# plt.show()
```
